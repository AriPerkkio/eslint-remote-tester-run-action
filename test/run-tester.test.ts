import fs from 'fs';
import { resolve } from 'path';
import { exec } from '@actions/exec';

import runTester from '../src/run-tester';
import { ESLINT_REMOTE_TESTER_BIN } from '../src/peer-dependencies';
import { sanitizeStackTrace } from './utils';
import { Config } from 'eslint-remote-tester/dist/exports-for-compare-action';

const EXPECTED_RUN_CONFIG = './eslint-remote-tester-runner-internal.config';
const CONFIG_JS = './test/eslint-remote-tester.config.js';
const CONFIG_TS = './test/eslint-remote-tester.typescript.config.ts';
const INVALID_CONFIG = './test/eslint-remote-tester.invalid.config.js';
const CONFIG_WITH_ON_COMPLETE =
    './test/eslint-remote-tester.config.onComplete.js';

jest.mock('@actions/exec', () => ({ exec: jest.fn() }));

function readRunConfig(extension: 'js' | 'ts') {
    let content: Config;

    jest.isolateModules(() => {
        content = require(resolve(`${EXPECTED_RUN_CONFIG}.${extension}`));
    });

    return content!;
}

function cleanup() {
    jest.resetModules();

    ['js', 'ts'].forEach(extension => {
        const name = `${EXPECTED_RUN_CONFIG}.${extension}`;

        if (fs.existsSync(name)) {
            fs.unlinkSync(name);
        }
    });
}

describe('run-tester', () => {
    beforeEach(cleanup);
    afterEach(cleanup);

    test('runs eslint-remote-tester with provided Javascript configuration', async () => {
        await runTester(CONFIG_JS);

        expect(exec).toHaveBeenCalledWith(
            `${ESLINT_REMOTE_TESTER_BIN} --config ${EXPECTED_RUN_CONFIG}.js`,
            [],
            {
                ignoreReturnCode: true,
                env: expect.objectContaining({
                    NODE_OPTIONS: '--max_old_space_size=5120',
                }),
            }
        );
    });

    test('creates CommonJS module when using Javascript configuration file', async () => {
        await runTester(CONFIG_JS);

        const configContents = fs.readFileSync(
            `${EXPECTED_RUN_CONFIG}.js`,
            'utf8'
        );

        expect(sanitizeStackTrace(configContents)).toMatchInlineSnapshot(`
            "// Generated by eslint-remote-tester-run-action
            const fs = require('fs');

            // Load user's eslint-remote-tester.config.js
            const usersConfig = require('<removed>/test/eslint-remote-tester.config.js');

            module.exports = {
                ...usersConfig,
                
                // Values from eslint-remote-tester-run-action's default configuration
                ...{
                \\"cache\\": false,
                \\"CI\\": true
            },

                onComplete: async function onComplete(results, comparisonResults, repositoryCount) {
                    // Write results to cache
                    fs.writeFileSync('/tmp/results.json', JSON.stringify({ results, repositoryCount }));

                    if(usersConfig.onComplete) {
                        await usersConfig.onComplete(results, comparisonResults, repositoryCount);
                    }
                }

            };
            "
        `);
    });

    test('creates ES module when using Typescript configuration file', async () => {
        await runTester(CONFIG_TS);

        const configContents = fs.readFileSync(
            `${EXPECTED_RUN_CONFIG}.ts`,
            'utf8'
        );

        expect(sanitizeStackTrace(configContents)).toMatchInlineSnapshot(`
            "// Generated by eslint-remote-tester-run-action
            import * as fs from 'fs';
            import type { Config } from 'eslint-remote-tester';

            // Load user's eslint-remote-tester.config.ts
            import usersConfig from '<removed>/test/eslint-remote-tester.typescript.config';

            const config: Config = {
                ...usersConfig,
                
                // Values from eslint-remote-tester-run-action's default configuration
                ...{
                \\"cache\\": false,
                \\"CI\\": true
            },

                onComplete: async function onComplete(results, comparisonResults, repositoryCount) {
                    // Write results to cache
                    fs.writeFileSync('/tmp/results.json', JSON.stringify({ results, repositoryCount }));

                    if(usersConfig.onComplete) {
                        await usersConfig.onComplete(results, comparisonResults, repositoryCount);
                    }
                }

            };

            export default config;
            "
        `);
    });

    test('throws if given configuration does not exist', () => {
        return expect(runTester('./non-existing-config')).rejects.toThrowError(
            /(?=.*Unable to find eslint-remote-tester config with path)(?=.*non-existing-config)/
        );
    });

    test('uses onComplete from users configuration', async () => {
        await runTester(CONFIG_WITH_ON_COMPLETE);

        expect(sanitizeStackTrace(readRunConfig('js').onComplete!.toString()))
            .toMatchInlineSnapshot(`
            "async function onComplete(results, comparisonResults, repositoryCount) {
                    // Write results to cache
                    fs.writeFileSync('/tmp/results.json', JSON.stringify({ results, repositoryCount }));

                    if(usersConfig.onComplete) {
                        await usersConfig.onComplete(results, comparisonResults, repositoryCount);
                    }
                }"
        `);
    });

    test('cache is disabled by default', async () => {
        await runTester(CONFIG_JS);

        expect(readRunConfig('js').cache).toBe(false);
    });

    test('CI is enabled by default', async () => {
        await runTester(CONFIG_JS);

        expect(readRunConfig('js').CI).toBe(true);
    });

    test('rulesUnderTesting is defaulted to []', async () => {
        await runTester(CONFIG);

        expect(readRunConfig().rulesUnderTesting).toBe([]);
    });

    test('configuration is validated', () => {
        const consolelog = console.log;
        console.log = jest.fn();

        return expect(runTester(INVALID_CONFIG))
            .rejects.toThrowErrorMatchingInlineSnapshot(
                `
"Configuration validation errors:
- Missing repositories."
`
            )
            .then(() => (console.log = consolelog));
    });
});
