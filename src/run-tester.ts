import fs from 'fs';
import path from 'path';
import { exec } from '@actions/exec';
import { Config } from 'eslint-remote-tester/dist/exports-for-compare-action';

import {
    requirePeerDependency,
    ESLINT_REMOTE_TESTER_BIN,
} from './peer-dependencies';

const INTERNAL_CONFIG = './eslint-remote-tester-runner-internal.config.js';
export const RESULTS_TMP = '/tmp/results.json';

/**
 * Configuration values used internally. These are overwritten from user provided configuration
 */
const DEFAULT_CONFIG: Partial<Config> = {
    cache: false,
    CI: true,
};

// prettier-ignore
const CONFIGURATION_TEMPLATE = (
    pathToUsersConfiguration: string
) =>
 `// Generated by eslint-remote-tester-run-action
const fs = require('fs');

// Load user's eslint-remote-tester.config.js
const usersConfig = require('${pathToUsersConfiguration}');

module.exports = {
    ...usersConfig,

    // Values from eslint-remote-tester-run-action's default configuration
    ...${JSON.stringify(DEFAULT_CONFIG, null, 4)},

    onComplete: async function onComplete(results, comparisonResults, repositoryCount) {
        // Write results to cache
        fs.writeFileSync('${RESULTS_TMP}', JSON.stringify({ results, repositoryCount }));

        if(usersConfig.onComplete) {
            await usersConfig.onComplete(results, comparisonResults, repositoryCount);
        }
    }
};
`;

/**
 * Run `eslint-remote-tester` and save results to temporary location
 */
export default async function runTester(configLocation: string): Promise<void> {
    const usersConfigLocation = path.resolve(configLocation);

    if (!fs.existsSync(ESLINT_REMOTE_TESTER_BIN)) {
        throw new Error(
            `Missing eslint-remote-tester. Expected it to be available at ${path.resolve(
                ESLINT_REMOTE_TESTER_BIN
            )}`
        );
    }
    if (!fs.existsSync(usersConfigLocation)) {
        throw new Error(
            `Unable to find eslint-remote-tester config with path ${usersConfigLocation}`
        );
    }

    // Write eslint-remote-tester configuration file
    fs.writeFileSync(
        INTERNAL_CONFIG,
        CONFIGURATION_TEMPLATE(usersConfigLocation)
    );

    let config: Config;

    // Useless try-catch required by esbuild
    // eslint-disable-next-line no-useless-catch
    try {
        config = require(path.resolve(INTERNAL_CONFIG));
    } catch (e) {
        throw e;
    }

    // Validate configuration before run
    const { validateConfig } = requirePeerDependency('eslint-remote-tester');
    await validateConfig(config, false);

    await exec(`${ESLINT_REMOTE_TESTER_BIN} --config ${INTERNAL_CONFIG}`, [], {
        ignoreReturnCode: true,
        env: { ...process.env, NODE_OPTIONS: '--max_old_space_size=5120' },
    });
}
